#include "ThingSpeak.h"
#include <Wire.h>
#include <LIS3MDL.h>
#include <WiFi.h>
#define SECRET_PASS "XXXXXXXXXXXX"
#define SECRET_SSID "XXXXXXXXXXXXXXXXX"
#define SECRET_CH_ID XXXXX     // replace 0000000 with your channel number
#define SECRET_WRITE_APIKEY "XXXXXXXXXXX"   // replace XYZ with your channel write API Key

char ssid[] = SECRET_SSID;   // your network SSID (name) 
char pass[] = SECRET_PASS;   // your network password
int keyIndex = 0;            // your network key Index number (needed only for WEP)
WiFiClient  client;

unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;

LIS3MDL mag;

// Definition of Pins
int UnLck=2; // Lock Unlocked
int Lck =3; // Lock Locked
int Zn2 = 33; // Zone 2
int Zn1 = 32; // Zone 1
int Zn3 = 15; // Zone 3
int Zn4 = 14; // Zone 4
int Zn5 = 4; // Zone 5


String myStatus = "";
char report[80];
void setup() {
  Serial.begin(115200);  //Initialize serial

  WiFi.mode(WIFI_STA);   
  ThingSpeak.begin(client);  // Initialize ThingSpeak
   Wire.begin(13, 16);
   pinMode(UnLck, OUTPUT);
   pinMode(Lck, OUTPUT);
   pinMode(Zn2, OUTPUT);
   pinMode(Zn1, OUTPUT);
   pinMode(Zn3, OUTPUT);
   pinMode(Zn4, OUTPUT);
   pinMode(Zn5, OUTPUT);
   if (!mag.init())
  {
    Serial.println("Failed to detect and initialize magnetometer!");
    while (1);
  }

  mag.enableDefault();
  
}

void loop() {
  mag.read();

  snprintf(report, sizeof(report), "M: %6d %6d %6d",
           mag.m.x, mag.m.y, mag.m.z);
// Serial.println(report);
delay(500);
  // Connect or reconnect to WiFi
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass);  // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
      delay(5000);     
    } 
    Serial.println("\nConnected.");
  }
  if(mag.m.x>1000 && mag.m.x <3500 && mag.m.y >-2000 && mag.m.y <0 && mag.m.z >0 && mag.m.z <1500) 
{
   digitalWrite(UnLck, LOW);
   digitalWrite(Lck, LOW);
   digitalWrite(Zn2, LOW);
   digitalWrite(Zn1, HIGH);
   digitalWrite(Zn3, LOW);
   digitalWrite (Zn4, LOW);
   digitalWrite (Zn5, LOW);
   Serial.println("Zone One");
   ThingSpeak.setField(1, 1);
    
}
// ZONE LOCKED
else if(mag.m.x>3000 && mag.m.x <4500 && mag.m.y >50 && mag.m.y <1500 && mag.m.z >-2000 && mag.m.z <0) 
{
   digitalWrite(UnLck, LOW);
   digitalWrite(Lck, HIGH);
   digitalWrite(Zn2, LOW);
   digitalWrite(Zn1, LOW);
   digitalWrite(Zn3, LOW);
   digitalWrite (Zn4, LOW);
   digitalWrite (Zn5, LOW);
   Serial.println("Zone Locked");
   ThingSpeak.setField(1, 2);

}
// ZONE TWO
else if(mag.m.x>4000 && mag.m.x <6500 && mag.m.y >1500 && mag.m.y <5000 && mag.m.z >-6500 && mag.m.z <-1500) 
{
   digitalWrite(UnLck, LOW);
   digitalWrite(Lck, LOW);
   digitalWrite(Zn2, HIGH);
   digitalWrite(Zn1, LOW);
   digitalWrite(Zn3, LOW);
   digitalWrite (Zn4, LOW);
   digitalWrite (Zn5, LOW);
   Serial.println("Zone Two");
   ThingSpeak.setField(1, 3);

}
// ZONE UNLOCKED
else if(mag.m.x>1500 && mag.m.x <3500 && mag.m.y >6000 && mag.m.y <8000 && mag.m.z >-8000 && mag.m.z <-6000) 
{
   digitalWrite(UnLck, HIGH);
   digitalWrite(Lck, LOW);
   digitalWrite(Zn2, LOW);
   digitalWrite(Zn1, LOW);
   digitalWrite(Zn3, LOW);
   digitalWrite (Zn4, LOW);
   digitalWrite (Zn5, LOW);
   Serial.println("Zone Unlocked");
   ThingSpeak.setField(1, 4);

}
// ZONE THREE
else if(mag.m.x>-4500 && mag.m.x <0 && mag.m.y >500 && mag.m.y <8500 && mag.m.z >-9000 && mag.m.z <0) 
{
   digitalWrite(UnLck, LOW);
   digitalWrite(Lck, LOW);
   digitalWrite(Zn2, LOW);
   digitalWrite(Zn1, LOW);
   digitalWrite(Zn3, HIGH);
   digitalWrite (Zn4, LOW);
   digitalWrite (Zn5, LOW);
   Serial.println("Zone Three");
   ThingSpeak.setField(1, 5);

}
// ZONE FOUR
else if(mag.m.x>-3500 && mag.m.x <-500 && mag.m.y >-2500 && mag.m.y <500 && mag.m.z >0 && mag.m.z <2500) 
{
   digitalWrite(UnLck, LOW);
   digitalWrite(Lck, LOW);
   digitalWrite(Zn2, LOW);
   digitalWrite(Zn1, LOW);
   digitalWrite(Zn3, LOW);
   digitalWrite (Zn4, HIGH);
   digitalWrite (Zn5, LOW);
   Serial.println("Zone Four");
   ThingSpeak.setField(1, 6);

}
// ZONE FIVE
else if(mag.m.x>-500 && mag.m.x <1500 && mag.m.y >-2500 && mag.m.y <-1000 && mag.m.z >1000 && mag.m.z <2500) 
{
   digitalWrite(UnLck, LOW);
   digitalWrite(Lck, LOW);
   digitalWrite(Zn2, LOW);
   digitalWrite(Zn1, LOW);
   digitalWrite(Zn3, LOW);
   digitalWrite (Zn4, LOW);
   digitalWrite (Zn5, HIGH);
   Serial.println("Zone Five");
   ThingSpeak.setField(1, 7);

}
// ELSE - INFORMATION NOT USED. TEST LED.
else
{
   digitalWrite(UnLck, LOW);
   digitalWrite(Lck, LOW);
   digitalWrite(Zn2, LOW);
   digitalWrite(Zn1, LOW);
   digitalWrite(Zn3, LOW);
   digitalWrite (Zn4, LOW);
   digitalWrite (Zn5, LOW);
   Serial.println("Boundary - Calibration Required");
   ThingSpeak.setField(1, 8);
}
  ThingSpeak.setField(2, mag.m.x);
  ThingSpeak.setField(3, mag.m.y);
  ThingSpeak.setField(4, mag.m.z);

  // write to the ThingSpeak channel
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
   
  delay(500); // Wait 20 seconds to update the channel again
}
